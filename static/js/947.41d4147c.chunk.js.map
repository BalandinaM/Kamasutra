{"version":3,"file":"static/js/947.41d4147c.chunk.js","mappings":"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","sources":["components/users/userItem.jsx","components/common/paginator/paginator.jsx","components/users/users.jsx","redux/usersSelector.js","components/users/usersContainer.jsx"],"sourcesContent":["import React from \"react\";\nimport { NavLink } from 'react-router-dom';\nimport avatar from '../../assets/image/avatar.png';\nimport styled from \"styled-components\";\n\nconst UserItem = ({user, followingInProgress, unfollow, follow }) => {\n\n    return (\n        <Item key={user.id}>\n            <LeftBlock>\n              <NavLink to={'/profile/'+ user.id}>\n                <UserPhoto\n                  src={user.photos.small != null ? user.photos.small : avatar }\n                  alt={`Фото ${user.name} ${user.surname}`}\n                  width='40'\n                  height='40'/>\n              </NavLink>\n              {user.followed\n                ? <UserButton\n                    disabled={followingInProgress.some(id => id === user.id)}\n                    onClick={() => { unfollow(user.id)}}\n                  >Unfollow</UserButton>\n\n                : <UserButton\n                    disabled={followingInProgress.some(id => id === user.id)}\n                    onClick={() => {follow(user.id)}}\n                  >Follow</UserButton> }\n            </LeftBlock>\n            <RightBlock>\n              <Info>\n                <Name>{user.name}&#32;<span>{user.surname != null ? user.fullName.surname : \"Unknown\"}</span></Name>\n                <Status>{user.status}</Status>\n              </Info>\n              <Location>\n                <p>{\"user.location.country,\"}</p>\n                <p>{\"user.location.city\"}</p>\n              </Location>\n            </RightBlock>\n        </Item>\n    )\n  }\n\n\nconst Item = styled.li`\n  display: grid;\n  grid-template-columns: 1fr 6fr;\n  padding: 15px 0;\n`;\n\nconst LeftBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 15px;\n  align-items: center;\n`;\n\nconst UserPhoto = styled.img`\n  border-radius: 50%;\n  border: 3px solid #468f56;\n  background-color: #D76F30;\n  object-fit: cover;\n  width: 40px;\n  height: 40px;\n`;\n\nconst UserButton = styled.button`\n  display: block;\n  box-sizing: border-box;\n  padding: 3px 10px;\n  background-color: #468f56;\n  color:#172D13;\n  font-size: 12px;\n  border: none;\n  border-radius: 5px;\n\n  &:disabled {\n    background-color: yellow;\n  };\n`;\n\nconst RightBlock = styled.div`\n  display: grid;\n  grid-template-columns: 6fr 1fr;\n  text-decoration: none;\n  padding: 10px 15px;\n  border: 2px solid #D76F30;\n  border-radius: 15px;\n  background-color: #D76F30;\n  color: #172D13;\n`;\n\nconst Info = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 25px;\n  justify-content: space-between;\n`;\n\nconst Name = styled.p`\n  font-size: 18px;\n  font-weight: 700;\n  margin: 0;\n`;\n\nconst Status = styled.p`\n  font-size: 20px;\n  margin: 0;\n`\nconst Location = styled.div`\n  text-align: right;\n  font-size: 12px;\n\n  & p {\n    margin: 0;\n  };\n`\n\nexport default UserItem;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\n\n\nconst Paginator = ({currentPage, totalUsersCount, pageSize, onPageChanged, portionSize = 10}) => {\n\n  let pagesCount = Math.ceil(totalUsersCount / pageSize);\n  let pages = [];\n  // for (let i = 1; i <= pagesCount; i++) {\n  //   if (i < 10) {\n  //     pages.push(i);\n  //   } else {\n  //     break;\n  //   }\n  // }\n\n  for (let i = 1; i <= pagesCount; i++) {\n      pages.push(i);\n  }\n\nlet portionCount = Math.ceil(pagesCount / portionSize); //количество порций,  количество страниц делим на размер желаемой порции (100страниц(по 5 юзеров на каждой) / 10 (сколько кнопок пагинации выводить))\nlet [portionNumber, setPortionNumber] = useState(1); // [номер порции(начальный стейт), функция для обновления стейта] = useState(1) - передаем начальный стейт, то есть порция 1\nlet leftPortionPageNumber = (portionNumber - 1) * portionSize + 1; //левая порция (8-1)*10+1=71\nlet rightPortionPageNumber = portionNumber * portionSize; //правая порция 8*10 = 80\n// в процессе рендеринга и перерендеринга, порция которая будет отображаться у юзера на экране будет браться та что лежит между значениями 71 и 80, то есть 10 страниц.\n\n\n\n  return (\n    <WrapPages>\n      { portionNumber > 1 && //я так понимаю это выражение если количество порций больше одного, то отрисовываем кнопку\n      <Button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</Button> // кнопка для просмотра предыдущей страницы, запускается функция из useState, уменьшаем номер порции на единицу\n      }\n      {pages\n      .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber) //ищем страницу которая находится между левой и правой порцией страниц\n      .map(p => {// и потом мапим результат полученный из фильтра и отрисовываем пагинацию\n        if (currentPage === p) {\n          return <CurrentPage key={ pages.indexOf(p)} onClick={(e) => {onPageChanged(p)}}>{p}</CurrentPage>\n        } else {\n          return <Page key={ pages.indexOf(p)} onClick={(e) => {onPageChanged(p)}}>{p}</Page>\n        }\n      })}\n\n    { portionCount > portionNumber && // если количество порций болше чем номер порции отрисовываем кнопку некст\n    <Button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</Button> }\n\n    </WrapPages>\n  )\n}\n\nconst WrapPages = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n  margin-bottom: 20px;\n  justify-content: center;\n` ;\n\nconst CurrentPage = styled.span`\n  font-size: 20px;\n  font-weight: 700;\n  background-color: #D76F30;\n  border-radius: 10%;\n  color: #172D13;\n  padding: 6px 15px 5px;\n`;\n\nconst Page = styled.span`\n  display: inline-flex;\n  padding: 8px 13px 5px;\n  border: 2px solid #D76F30;\n  border-radius: 10%;\n`\n\nconst Button = styled.button`\n  border: none;\n  border-radius: 10%;\n  background-color: #D76F30;\n  color: #172D13;\n  padding-left: 13px;\n  padding-right: 13px;\n`\n\nexport default Paginator;\n","import React from \"react\";\nimport UserItem from \"./userItem\";\nimport Paginator from \"../common/paginator/paginator\";\nimport styled from \"styled-components\";\n\nlet Users = ({currentPage, totalUsersCount, pageSize, onPageChanged, usersData, ...props}) => {\n  return (\n    <Section>\n      <Title>Добавь еще друзей!</Title>\n      <Ul>\n        { usersData.map(u =>\n            <UserItem user = {u} followingInProgress = {props.followingInProgress} key = {u.id} unfollow = {props.unfollow} follow = {props.follow}\n            />\n          )\n        }\n      </Ul>\n      <Paginator currentPage = {currentPage} totalUsersCount ={totalUsersCount} pageSize = {pageSize} onPageChanged = {onPageChanged} />\n    </Section>\n  )\n}\n\n// currentPage = {currentPage} здесь обращаемся на прямую т.к. напрямую объявили в приходящих пропсах\n// follow = {props.follow} тут и в аналогичных местах обращаемся через props т.к. напрямую не указывали, оно берется из \"...props\"\n\nconst Section = styled.section`\n  padding: 25px;\n`;\n\nconst Title = styled.h2`\n  font-size: 20px;\n  text-align: center;\n`;\n\nconst Ul = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  margin-bottom: 30px;\n`;\n\n\n\n\nexport default Users;\n","export const getUsersData = (state) => {\n  return state.usersPage.usersData;\n}\n\nexport const getPageSize = (state) => {\n  return state.usersPage.pageSize;\n}\n\nexport const getTotalUsersCount = (state) => {\n  return state.usersPage.totalUsersCount;\n}\n\nexport const getCurrentPage = (state) => {\n  return state.usersPage.currentPage;\n}\n\nexport const getIsFetching = (state) => {\n  return state.usersPage.isFetching;\n}\n\nexport const getFollowingInProgress = (state) => {\n  return state.usersPage.followingInProgress;\n}\n","import React from \"react\";\nimport Users from \"./users\";\nimport { connect } from 'react-redux';\nimport { follow, unfollow, setCurrentPage, toggleFollowingProgress, getUsers } from \"../../redux/usersReducer\";\nimport Preloader from \"../common/preloader/preloader\";\nimport { compose } from \"redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { getUsersData, getPageSize, getTotalUsersCount, getCurrentPage, getIsFetching, getFollowingInProgress} from \"../../redux/usersSelector\";\n\nclass UsersContainer extends React.Component {\n  componentDidMount() {\n    this.props.getUsers(this.props.currentPage, this.props.pageSize);\n  }\n\n  onPageChanged = (pageNumber) => {\n    this.props.getUsers(pageNumber, this.props.pageSize);\n  };\n\n  render() {\n    return (\n      <>\n        {this.props.isFetching ? <Preloader/> : null}\n        <Users\n          totalUsersCount={this.props.totalUsersCount}\n          pageSize={this.props.pageSize}\n          currentPage={this.props.currentPage}\n          onPageChanged={this.onPageChanged}\n          usersData={this.props.usersData}\n          unfollow={this.props.unfollow}\n          follow={this.props.follow}\n          followingInProgress={this.props.followingInProgress}//передаем массив из initialState\n        />\n      </>\n    );\n  }\n}\n\nlet mapStateToProps = (state) => {\n  return {\n    usersData: getUsersData(state),\n    pageSize: getPageSize(state),\n    totalUsersCount: getTotalUsersCount(state),\n    currentPage: getCurrentPage(state),\n    isFetching: getIsFetching(state),\n    followingInProgress: getFollowingInProgress(state),\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps,{ follow, unfollow, setCurrentPage, toggleFollowingProgress, getUsers}),\n  withAuthRedirect\n)(UsersContainer);\n"],"names":["Item","styled","li","LeftBlock","div","UserPhoto","img","UserButton","button","RightBlock","Info","Name","p","Status","Location","_ref","user","followingInProgress","unfollow","follow","_jsxs","children","_jsx","NavLink","to","id","src","photos","small","alt","name","surname","width","height","followed","disabled","some","onClick","fullName","status","WrapPages","CurrentPage","span","Page","Button","currentPage","totalUsersCount","pageSize","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","useState","leftPortionPageNumber","rightPortionPageNumber","filter","map","e","indexOf","Section","section","Title","h2","Ul","ul","usersData","props","u","UserItem","Paginator","getUsersData","state","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","UsersContainer","React","constructor","arguments","pageNumber","this","getUsers","componentDidMount","render","_Fragment","Preloader","Users","compose","connect","setCurrentPage","toggleFollowingProgress","withAuthRedirect"],"sourceRoot":""}